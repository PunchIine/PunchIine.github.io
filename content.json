{"pages":[],"posts":[{"title":"Git学习笔记","text":"Git 学习笔记 git init —— 初始化一个Git仓库 执行后会生成一个.git目录， 该目录包含了资源的所有元数据 使用指定目录作为git仓库 ——git init newrepo 执行后会在newrepo目录下生成.git目录 将文件纳入版本控制 git add —— 添至暂存区git add . —— 将当前目录下所有未纳入的文件添加到暂存区 git add {文件名} —— 将指定文件添加到暂存区 git commit —— 提交git commit -m ‘提交说明’ —— 对暂存区中的文件进行提交（添加到仓库中） git clone —— 从现有Git仓库中拷贝项目git clone or git clone ——克隆到指定目录 如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字 git commit -a 跳过git add，直接添加至暂存区后提交 git config —— 配置信息git config –list —— 显示当前的git配置信息 git config -e —— 针对当前仓库编辑git配置文件 git config -e –global —— 针对系统上所有仓库 设置提交代码时的用户信息： git config –global user.name {YOURGITHUBNAME}git config –global user.email {YOUREMAIL} git status —— 查看仓库当前的状态 显示有变更的文件git status -s 获得更简短的输出结果 git diff —— 比较文件的不同，即暂存区和工作区的差异 尚未缓存的改动：git diff 查看已缓存的改动： git diff –cached 查看已缓存的与未缓存的所有改动：git diff HEAD 显示摘要而非整个 diff：git diff –stat git reset —— 用于回退版本， 可以制定退回某一次提交的版本1git reset [--soft | --mixed | --hard] [HEAD] git reset HEAD^ - 回退所有内容到上一个版本 git reset HEAD^ {filename} - 回退指定文件到上一个版本 git reset {版本号} - 回退到指定版本 git reset –soft HEAD – soft参数用于回退到某个版本 例： 1$ git reset --soft HEAD~3 # 回退上上上一个版本 git reset –hard HEAD –hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交（慎重使用） HEAD 说明： HEAD 表示当前版本 HEAD^ 上一个版本 HEAD^^ 上上一个版本 HEAD^^^ 上上上一个版本 以此类推… 可以使用 ～数字表示 HEAD~0 表示当前版本 HEAD~1 上一个版本 HEAD^2 上上一个版本 HEAD^3 上上上一个版本 以此类推… git reset HEAD 命令用于取消已缓存的内容。 git rm —— 将文件从暂存区和工作区中删除如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f git rm -f 如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可： git rm –cached git mv —— 用于移动或重命名一个文件,目录或软连接。git mv [file] [newfile] git log —— 查看历史提交记录用 –online 选项来查看历史记录的简洁版本。 git log –online git blame - 以列表形式查看指定文件的历史修改记录 git remote —— 远程仓库操作git remote -v —— 显示所有远程仓库 git remote show [remote] —— 显示某个远程仓库的信息 remote为远程仓库地址 git remote set-url [shortname] [url] shortname 为本地的版本库 添加远程版本库： git remote add [shortname] [url] shortname 为本地的版本库 git remote rm name # 删除远程仓库git remote rename old_name new_name # 修改仓库名 git branch (branchname) —— 创建新分支git branch —— 列出本地的分支 git checkout (branchname) —— 切换分支命令当切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。 也可以使用 git checkout -b (branchname) —— 创建新分支并立即切换到该分支下，从而在该分支中操作。 git merge —— 合并分支命令git merge [branchname] —— 将指定分支与当前所在分支合并 git fetch —— 从远程获取代码库执行完后执行git merge合并远程分支到你所在的分支 git tag [tagname]—— 为提交快照打上标签例： 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签 git tag —— 查看所有标签 -a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 git log –decorate —— 查看标签","link":"/2022/04/10/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[],"categories":[]}