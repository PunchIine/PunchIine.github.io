{"pages":[],"posts":[{"title":"Json","text":"JSON: JavaScript Object Notation(JavaScript 对象表示法) JSON 语法规则JSON 语法是 JavaScript 对象表示语法的子集。 数据在名称/值对中 数据由逗号分隔 大括号 {} 保存对象 中括号 [] 保存数组，数组可以包含多个对象 JSON 名称/值对JSON 数据的书写格式是： 1key : value 名称/值对包括字段名称（在双引号中），后面写一个冒号，然后是值： “name” : “菜鸟教程” JSON 值JSON 值可以是： 数字（整数或浮点数） 字符串（在双引号中） 逻辑值（true 或 false） 数组（在中括号中） 对象（在大括号中） null JSON 文件 JSON 文件的文件类型是 .json JSON 文本的 MIME 类型是 application/json MINE类型：媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。 它在IETF RFC 6838中进行了定义和标准化。 JSON对象必须在大括号{}中书写， key必须是字符串，value可以是合法的JSON数据类型（见JSON值） 使用点号访问对象值例： 123var myobj, x;myobj = {&quot;name&quot;:&quot;runoob&quot;, &quot;alexa&quot;:10000, &quot;site&quot;:null};x = myobj[&quot;name&quot;]; 使用点号. 或者中括号 [] 来访问嵌套的JSON对象。12x = myobj.sites.site1;x = myobj.sites[&quot;site1&quot;]; 修改JSON值使用点号访问并修改 1myobj.sites.site1 = &quot;sxasxaxa&quot; 使用中括号访问并修改 1myobj.sites.[&quot;site1&quot;] = &quot;sadadsad&quot; 修改对象属性使用delete关键字来删除JSON对象的属性： 1delete myobj.sites.site1 JSON数组数组可以作为JSON对象例： 1[ &quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot; ] JSON对象中的数组例： 12345{&quot;name&quot;:&quot;网站&quot;,&quot;num&quot;:3,&quot;sites&quot;:[ &quot;Google&quot;, &quot;Runoob&quot;, &quot;Taobao&quot; ]} 嵌套 JSON 对象中的数组JSON 对象中数组可以包含另外一个数组，或者另外一个 JSON 对象： 例： 123456789myObj = { &quot;name&quot;:&quot;网站&quot;, &quot;num&quot;:3, &quot;sites&quot;: [ { &quot;name&quot;:&quot;Google&quot;, &quot;info&quot;:[ &quot;Android&quot;, &quot;Google 搜索&quot;, &quot;Google 翻译&quot; ] }, { &quot;name&quot;:&quot;Runoob&quot;, &quot;info&quot;:[ &quot;菜鸟教程&quot;, &quot;菜鸟工具&quot;, &quot;菜鸟微信&quot; ] }, { &quot;name&quot;:&quot;Taobao&quot;, &quot;info&quot;:[ &quot;淘宝&quot;, &quot;网购&quot; ] } ]} ————JSON数组和对象都可以使用for-in循环来访问 Python jsonjson.dumps1json.dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, encoding=&quot;utf-8&quot;, default=None, sort_keys=False, **kw) ——将python对象编码成JSON字符串 123456import jsondata = [ { 'a' : 1, 'b' : 2, 'c' : 3, 'd' : 4, 'e' : 5 } ]data2 = json.dumps({'a': 'Runoob', 'b': 7}, sort_keys=True, indent=4, separators=(',', ': '))print(data2) json.loads1json.loads(s[, encoding[, cls[, object_hook[, parse_float[, parse_int[, parse_constant[, object_pairs_hook[, **kw]]]]]]]]) ——json.loads 用于解码 JSON 数据。该函数返回 Python 字段的数据类型。 123456import jsonjsonData = '{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5}';text = json.loads(jsonData)print(text)","link":"/2022/04/10/Json%E7%AC%94%E8%AE%B0/"},{"title":"Git学习笔记","text":"git init —— 初始化一个Git仓库 执行后会生成一个.git目录， 该目录包含了资源的所有元数据 使用指定目录作为git仓库 ——git init newrepo 执行后会在newrepo目录下生成.git目录 将文件纳入版本控制 git add —— 添至暂存区git add . —— 将当前目录下所有未纳入的文件添加到暂存区 git add {文件名} —— 将指定文件添加到暂存区 git commit —— 提交git commit -m ‘提交说明’ —— 对暂存区中的文件进行提交（添加到仓库中） git clone —— 从现有Git仓库中拷贝项目git clone or git clone ——克隆到指定目录 如果要自己定义要新建的项目目录名称，可以在上面的命令末尾指定新的名字 git commit -a 跳过git add，直接添加至暂存区后提交 git config —— 配置信息git config –list —— 显示当前的git配置信息 git config -e —— 针对当前仓库编辑git配置文件 git config -e –global —— 针对系统上所有仓库 设置提交代码时的用户信息： git config –global user.name {YOURGITHUBNAME}git config –global user.email {YOUREMAIL} git status —— 查看仓库当前的状态 显示有变更的文件git status -s 获得更简短的输出结果 git diff —— 比较文件的不同，即暂存区和工作区的差异 尚未缓存的改动：git diff 查看已缓存的改动： git diff –cached 查看已缓存的与未缓存的所有改动：git diff HEAD 显示摘要而非整个 diff：git diff –stat git reset —— 用于回退版本， 可以制定退回某一次提交的版本1git reset [--soft | --mixed | --hard] [HEAD] git reset HEAD^ - 回退所有内容到上一个版本 git reset HEAD^ {filename} - 回退指定文件到上一个版本 git reset {版本号} - 回退到指定版本 git reset –soft HEAD – soft参数用于回退到某个版本 例： 1$ git reset --soft HEAD~3 # 回退上上上一个版本 git reset –hard HEAD –hard 参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交（慎重使用） HEAD 说明： HEAD 表示当前版本 HEAD^ 上一个版本 HEAD^^ 上上一个版本 HEAD^^^ 上上上一个版本 以此类推… 可以使用 ～数字表示 HEAD~0 表示当前版本 HEAD~1 上一个版本 HEAD^2 上上一个版本 HEAD^3 上上上一个版本 以此类推… git reset HEAD 命令用于取消已缓存的内容。 git rm —— 将文件从暂存区和工作区中删除如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f git rm -f 如果想把文件从暂存区域移除，但仍然希望保留在当前工作目录中，换句话说，仅是从跟踪清单中删除，使用 –cached 选项即可： git rm –cached git mv —— 用于移动或重命名一个文件,目录或软连接。git mv [file] [newfile] git log —— 查看历史提交记录用 –online 选项来查看历史记录的简洁版本。 git log –online git blame - 以列表形式查看指定文件的历史修改记录 git remote —— 远程仓库操作git remote -v —— 显示所有远程仓库 git remote show [remote] —— 显示某个远程仓库的信息 remote为远程仓库地址 git remote set-url [shortname] [url] shortname 为本地的版本库 添加远程版本库： git remote add [shortname] [url] shortname 为本地的版本库 git remote rm name # 删除远程仓库git remote rename old_name new_name # 修改仓库名 git branch (branchname) —— 创建新分支git branch —— 列出本地的分支 git checkout (branchname) —— 切换分支命令当切换分支的时候，Git 会用该分支的最后提交的快照替换你的工作目录的内容， 所以多个分支不需要多个目录。 也可以使用 git checkout -b (branchname) —— 创建新分支并立即切换到该分支下，从而在该分支中操作。 git merge —— 合并分支命令git merge [branchname] —— 将指定分支与当前所在分支合并 git fetch —— 从远程获取代码库执行完后执行git merge合并远程分支到你所在的分支 git tag [tagname]—— 为提交快照打上标签例： 我们可以用 git tag -a v1.0 命令给最新一次提交打上（HEAD）”v1.0”的标签 git tag —— 查看所有标签 -a 选项意为”创建一个带注解的标签”。 不用 -a 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解。 git log –decorate —— 查看标签","link":"/2022/04/10/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[],"categories":[]}